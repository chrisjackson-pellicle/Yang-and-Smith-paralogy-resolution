/////////////////////////////////////////////////////////////////////////////////
////////////// Nextflow config file for paragone.nf pipeline  ///////////////////
/////////////////////////////////////////////////////////////////////////////////


nextflow.enable.dsl=2


// set some defaults for pipeline parameters
params {

    // paragone-nf pipeline parameters
    version = false
	help = false
    outdir = 'results'

    // paragone check_and_align parameters
    gene_fasta_directory = false
    internal_outgroups = false
    external_outgroups_file = false
    external_outgroups = false
    gene_name_delimiter = '_'
    gene_name_field_num = 1
    pool = 1  // also used in alignment_to_tree; align_selected_and_tree;
    threads = 1  // also used in alignment_to_tree; align_selected_and_tree;
    use_clustal = false  // also used in align_selected_and_tree;
    mafft_algorithm = 'auto'  // also used in align_selected_and_tree;
    mafft_adjustdirection = false
    no_trimming = false  // also used in align_selected_and_tree;
    trimal_terminalonly_off = false  // also used in align_selected_and_tree;
    trimal_gapthreshold = 0.12  // also used in align_selected_and_tree;
    trimal_simthreshold = false  // also used in align_selected_and_tree;
    trimal_cons = false  // also used in align_selected_and_tree;
    trimal_nogaps = false  // also used in align_selected_and_tree;
    trimal_noallgaps = false  // also used in align_selected_and_tree;
    trimal_gappyout = false  // also used in align_selected_and_tree;
    trimal_strict = false  // also used in align_selected_and_tree;
    trimal_strictplus = false  // also used in align_selected_and_tree;
    trimal_automated1 = false  // also used in align_selected_and_tree;
    trimal_block = false  // also used in align_selected_and_tree;
    trimal_resoverlap = false  // also used in align_selected_and_tree;
    trimal_seqoverlap = false  // also used in align_selected_and_tree;
    trimal_w = false  // also used in align_selected_and_tree;
    trimal_gw = false  // also used in align_selected_and_tree;
    trimal_sw = false // also used in align_selected_and_tree;
    no_cleaning = false
    run_profiler = false  // also used in alignment_to_tree; qc_trees_and_extract_fasta; qc_trees_and_extract_fasta


    // paragone alignment_to_tree parameters
    generate_bootstraps = false  // also ued in align_selected_and_tree
    use_fasttree = false // also ued in align_selected_and_tree


    // paragone qc_trees_and_extract_fasta parameters
    treeshrink_q_value = 0.05
    cut_deep_paralogs_internal_branch_length_cutoff = 0.3
    min_tips = 4


    // paragone align_selected_and_tree parameters
    // *** All parameters defined in previous commands ***


    // paragone prune_paralogs parameters
    mo = false  // also used in final_alignments
    mi = false  // also used in final_alignments
    rt = false  // also used in final_alignments
    mo_algorithm_paragone = false
    minimum_taxa = 4
    ignore_1to1_orthologs = false
    debug = false

    //paragone final_alignments paramters
    // *** All parameters defined in previous commands ***

}

// enable HTML execution report by default, written to 'assembly.html'
report {
    enabled = true
    overwrite = true
    file = 'assembly.html'
}

// enable HTML timeline report by default, written to 'timeline.html'
timeline {
    enabled = true
    overwrite = true
    file = 'timeline.html'
}

/* 
enable .dot direct acyclic graph (DAG) report by default, written to 'dag.dot'. If
graphviz is installed this can be converted to e.g. png with the command: 
dot dag.dot -Tpng -o dag.png
*/
dag {
    enabled = true
    overwrite = true
    file = 'dag.dot'
}

// enable execution tracing file by default, written to 'pipeline_trace.txt'
trace {
    enabled = true
    overwrite = true
    file = 'pipeline_trace.txt'
    fields = 'task_id,name,status,exit,realtime,%cpu,rss,container'
}


/* 
set up profiles. Here I've made profiles for using SLURM, and also a 'standard' 
profile (default)
*/
profiles {


    slurm_singularity {
        process {
            withName: CHECK_AND_ALIGN {
                cpus = { 2 }
                memory = { 2.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..143 ? 'retry' : 'terminate' }
                maxRetries = 3
                time = '24h'
            }
            withName: ALIGNMENT_TO_TREE {
                cpus = { 2 }
                memory = { 2.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..143 ? 'retry' : 'terminate' }
                maxRetries = 3
                time = '24h'
            }
            withName: QC_TREES_AND_EXTRACT_FASTA {
                cpus = { 2 }
                memory = { 2.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..143 ? 'retry' : 'terminate' }
                maxRetries = 3
                time = '24h'
            }
            withName: ALIGN_SELECTED_AND_TREE {
                cpus = { 2 }
                memory = { 2.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..143 ? 'retry' : 'terminate' }
                maxRetries = 3
                time = '24h'
            }
            withName: PRUNE_PARALOGS {
                cpus = { 2 }
                memory = { 2.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..143 ? 'retry' : 'terminate' }
                maxRetries = 3
                time = '24h'
            }
            withName: FINAL_ALIGNMENTS {
                cpus = { 2 }
                memory = { 2.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..143 ? 'retry' : 'terminate' }
                maxRetries = 3
                time = '24h'
            }
            withLabel: in_container {
                container = \
                'library://chrisjackson-pellicle/collection/hybpiper-paragone:latest'
            }
        }

        executor {
            name = 'slurm'
        }

        singularity {
            enabled = true
            autoMounts = true
            cacheDir = 'singularity-images'
        }
    }


    conda {
        process {
            withName: CHECK_AND_ALIGN {
                cpus = { 2 }
                memory = { 2.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..143 ? 'retry' : 'terminate' }
                maxRetries = 3
            }
            withName: ALIGNMENT_TO_TREE {
                cpus = { 2 }
                memory = { 2.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..143 ? 'retry' : 'terminate' }
                maxRetries = 3
            }
            withName: QC_TREES_AND_EXTRACT_FASTA {
                cpus = { 2 }
                memory = { 2.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..143 ? 'retry' : 'terminate' }
                maxRetries = 3
            }
            withName: ALIGN_SELECTED_AND_TREE {
                cpus = { 2 }
                memory = { 2.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..143 ? 'retry' : 'terminate' }
                maxRetries = 3
            }
            withName: PRUNE_PARALOGS {
                cpus = { 2 }
                memory = { 2.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..143 ? 'retry' : 'terminate' }
                maxRetries = 3
            }
            withName: FINAL_ALIGNMENTS {
                cpus = { 2 }
                memory = { 2.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..143 ? 'retry' : 'terminate' }
                maxRetries = 3
            }  
        }

        process.conda = 'paragone'

        conda {
                createOptions = '-c chrisjackson-pellicle'
                cacheDir = 'work'  
                /*
                The cacheDir value defines the path where Conda environments are stored.
                When using a compute cluster make sure to provide a shared file system
                path accessible from all compute nodes.

                See https://www.nextflow.io/docs/latest/config.html#scope-conda
                 */
            }
        }


    conda_slurm {
        process {
            withName: CHECK_AND_ALIGN {
                cpus = { 2 }
                memory = { 2.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..143 ? 'retry' : 'terminate' }
                maxRetries = 3
            }
            withName: ALIGNMENT_TO_TREE {
                cpus = { 2 }
                memory = { 2.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..143 ? 'retry' : 'terminate' }
                maxRetries = 3
            }
            withName: QC_TREES_AND_EXTRACT_FASTA {
                cpus = { 2 }
                memory = { 2.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..143 ? 'retry' : 'terminate' }
                maxRetries = 3
            }
            withName: ALIGN_SELECTED_AND_TREE {
                cpus = { 2 }
                memory = { 2.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..143 ? 'retry' : 'terminate' }
                maxRetries = 3
            }
            withName: PRUNE_PARALOGS {
                cpus = { 2 }
                memory = { 2.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..143 ? 'retry' : 'terminate' }
                maxRetries = 3
            }
            withName: FINAL_ALIGNMENTS {
                cpus = { 2 }
                memory = { 2.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..143 ? 'retry' : 'terminate' }
                maxRetries = 3
            }  
        }

        process.conda = 'paragone'

        conda {
                createOptions = '-c chrisjackson-pellicle'
                cacheDir = 'work'  
                /*
                The cacheDir value defines the path where Conda environments are stored.
                When using a compute cluster make sure to provide a shared file system
                path accessible from all compute nodes.

                See https://www.nextflow.io/docs/latest/config.html#scope-conda
                 */
            }

        executor {
                name = 'slurm'  
            }
    }


    standard {
        process {
            withName: CHECK_AND_ALIGN {
                cpus = { 2 }
                memory = { 2.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..143 ? 'retry' : 'terminate' }
                maxRetries = 3
            }
            withName: ALIGNMENT_TO_TREE {
                cpus = { 2 }
                memory = { 2.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..143 ? 'retry' : 'terminate' }
                maxRetries = 3
            }
            withName: QC_TREES_AND_EXTRACT_FASTA {
                cpus = { 2 }
                memory = { 2.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..143 ? 'retry' : 'terminate' }
                maxRetries = 3
            }
            withName: ALIGN_SELECTED_AND_TREE {
                cpus = { 2 }
                memory = { 2.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..143 ? 'retry' : 'terminate' }
                maxRetries = 3
            }
            withName: PRUNE_PARALOGS {
                cpus = { 2 }
                memory = { 2.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..143 ? 'retry' : 'terminate' }
                maxRetries = 3
            }
            withName: FINAL_ALIGNMENTS {
                cpus = { 2 }
                memory = { 2.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..143 ? 'retry' : 'terminate' }
                maxRetries = 3
            }
        }
    }

    standard_singularity {
        process {
            withName: CHECK_AND_ALIGN {
                cpus = { 2 }
                memory = { 2.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..143 ? 'retry' : 'terminate' }
                maxRetries = 3
            }
            withName: ALIGNMENT_TO_TREE {
                cpus = { 2 }
                memory = { 2.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..143 ? 'retry' : 'terminate' }
                maxRetries = 3
            }
            withName: QC_TREES_AND_EXTRACT_FASTA {
                cpus = { 2 }
                memory = { 2.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..143 ? 'retry' : 'terminate' }
                maxRetries = 3
            }
            withName: ALIGN_SELECTED_AND_TREE {
                cpus = { 2 }
                memory = { 2.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..143 ? 'retry' : 'terminate' }
                maxRetries = 3
            }
            withName: PRUNE_PARALOGS {
                cpus = { 2 }
                memory = { 2.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..143 ? 'retry' : 'terminate' }
                maxRetries = 3
            }
            withName: FINAL_ALIGNMENTS {
                cpus = { 2 }
                memory = { 2.GB * task.attempt }
                errorStrategy  = { task.exitStatus in 137..143 ? 'retry' : 'terminate' }
                maxRetries = 3
            }
            withLabel: in_container {
                container = \
                'library://chrisjackson-pellicle/collection/hybpiper-paragone:latest'
            }
        }

        singularity {
            enabled = true
            autoMounts = true
            cacheDir = 'singularity-images'
        }
    }
}
